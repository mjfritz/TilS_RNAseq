return(resLFCWT[listitem])
})
if ( dim(df)[1] == 0){
newdf <- df %>%  data.frame() %>% rownames_to_column(var="locusTag") %>% as_tibble()
newdf <- newdf %>% filter(padj < padj.cutoff & abs(log2FoldChange) > lfc.cutoff)
newdf$abs_log2 <- abs(newdf$log2FoldChange) # Add absolute value columns
newdf$abs_stat <- abs(newdf$stat)
newanno <- anno_table[(anno_table$locusTag %in% newdf$locusTag), ] %>%
dplyr::select("locusTag", "name", "chromosome") # Subset anno_table to match the shorter list
newdf <- join_all( list(newdf, newanno), by = "locusTag", type = "full" )
}
sigresLFCWT <- lapply(setNames(nameKey, nameKey), function(listitem) {
lapply(resLFCWT[listitem], function(df) {
if ( dim(df)[1] == 0){
newdf <- df %>%  data.frame() %>% rownames_to_column(var="locusTag") %>% as_tibble()
newdf <- newdf %>% filter(padj < padj.cutoff & abs(log2FoldChange) > lfc.cutoff)
newdf$abs_log2 <- abs(newdf$log2FoldChange) # Add absolute value columns
newdf$abs_stat <- abs(newdf$stat)
newanno <- anno_table[(anno_table$locusTag %in% newdf$locusTag), ] %>%
dplyr::select("locusTag", "name", "chromosome") # Subset anno_table to match the shorter list
newdf <- join_all( list(newdf, newanno), by = "locusTag", type = "full" )
}
return (newdf)
})
return(resLFCWT[listitem])
})
sigresLFCWT <- lapply(setNames(nameKey, nameKey), function(listitem) {
lapply(resLFCWT[listitem], function(df) {
if ( !(dim(df)[1] == 0) ){
newdf <- df %>%  data.frame() %>% rownames_to_column(var="locusTag") %>% as_tibble()
newdf <- newdf %>% filter(padj < padj.cutoff & abs(log2FoldChange) > lfc.cutoff)
newdf$abs_log2 <- abs(newdf$log2FoldChange) # Add absolute value columns
newdf$abs_stat <- abs(newdf$stat)
newanno <- anno_table[(anno_table$locusTag %in% newdf$locusTag), ] %>%
dplyr::select("locusTag", "name", "chromosome") # Subset anno_table to match the shorter list
newdf <- join_all( list(newdf, newanno), by = "locusTag", type = "full" )
}
return (newdf)
})
return(resLFCWT[listitem])
})
resLFCT["Full"]
resLFCWT["Full"]
tester <- resLFCWT["Full"]
tester <- resLFCWT[["Full"]]
View(tester)
View(tester)
sigresLFCWT <- lapply(setNames(nameKey, nameKey), function(listitem) {
lapply(resLFCWT[[listitem]], function(df) {
if ( !(dim(df)[1] == 0) ){
newdf <- df %>%  data.frame() %>% rownames_to_column(var="locusTag") %>% as_tibble()
newdf <- newdf %>% filter(padj < padj.cutoff & abs(log2FoldChange) > lfc.cutoff)
newdf$abs_log2 <- abs(newdf$log2FoldChange) # Add absolute value columns
newdf$abs_stat <- abs(newdf$stat)
newanno <- anno_table[(anno_table$locusTag %in% newdf$locusTag), ] %>%
dplyr::select("locusTag", "name", "chromosome") # Subset anno_table to match the shorter list
newdf <- join_all( list(newdf, newanno), by = "locusTag", type = "full" )
}
return (newdf)
})
return(resLFCWT[listitem])
})
View(tester)
View(resLFCWT)
tester <- compact(resLFCWT)
View(tester)
tester <- lapply(setNames(nameKey, nameKey), function(listitem){ compact(resLFCWT[[listitem]])})
View(tester)
resLFCWT <- lapply(setNames(nameKey, nameKey), function(listitem){ compact(resLFCWT[[listitem]])}) #Remove blanks
View(resLFCWT)
sigresLFCWT <- lapply(setNames(nameKey, nameKey), function(listitem) {
lapply(resLFCWT[[listitem]], function(df) {
if ( !(dim(df)[1] == 0) ){
newdf <- df %>%  data.frame() %>% rownames_to_column(var="locusTag") %>% as_tibble()
newdf <- newdf %>% filter(padj < padj.cutoff & abs(log2FoldChange) > lfc.cutoff)
newdf$abs_log2 <- abs(newdf$log2FoldChange) # Add absolute value columns
newdf$abs_stat <- abs(newdf$stat)
newanno <- anno_table[(anno_table$locusTag %in% newdf$locusTag), ] %>%
dplyr::select("locusTag", "name", "chromosome") # Subset anno_table to match the shorter list
newdf <- join_all( list(newdf, newanno), by = "locusTag", type = "full" )
}
return (newdf)
})
return(resLFCWT[listitem])
})
View(resLFCWT)
sigresLFCWT <- lapply(setNames(nameKey, nameKey), function(listitem) {
lapply(resLFCWT[[listitem]], function(df) {
if ( !(dim(df)[1] == 0) ){
newdf <- df %>%  data.frame() %>% rownames_to_column(var="locusTag") %>% as_tibble()
newdf <- newdf %>% filter(padj < padj.cutoff & abs(log2FoldChange) > lfc.cutoff)
newdf$abs_log2 <- abs(newdf$log2FoldChange) # Add absolute value column
newanno <- anno_table[(anno_table$locusTag %in% newdf$locusTag), ] %>%
dplyr::select("locusTag", "name", "chromosome") # Subset anno_table to match the shorter list
newdf <- join_all( list(newdf, newanno), by = "locusTag", type = "full" )
}
return (newdf)
})
return(resLFCWT[listitem])
})
View(sigresLFCWT)
sigresLFCWT <- lapply(setNames(nameKey, nameKey), function(listitem) {
lapply(resLFCWT[[listitem]], function(df) {
if ( !(dim(df)[1] == 0) ){
newdf <- df %>%  data.frame() %>% rownames_to_column(var="locusTag") %>% as_tibble()
newdf <- newdf %>% filter(padj < padj.cutoff & abs(log2FoldChange) > lfc.cutoff)
newdf$abs_log2 <- abs(newdf$log2FoldChange) # Add absolute value column
newanno <- anno_table[(anno_table$locusTag %in% newdf$locusTag), ] %>%
dplyr::select("locusTag", "name", "chromosome") # Subset anno_table to match the shorter list
newdf <- join_all( list(newdf, newanno), by = "locusTag", type = "full" )
}
return (newdf)
})
})
View(sigresLFCWT)
rm(tester)
tester <- names(sigresLFCWT[["Full"]])
View(desresSig)
rm(tester)
tester <- names(sigresLFCWT[["Full"]])
wtest <- sub("strain_", "", tester[[1]])
wordstest <- unlist(strsplit(w, "_vs_", fixed=TRUE))
wordstest <- unlist(strsplit(wtest, "_vs_", fixed=TRUE))
dir.create(here::here("results", "pairwise"), showWarnings = FALSE)
sigresLFCWTCol <- lapply(nameKey, function(listitem){
wordList <- names(sigresLFCWT[[listitem]])
newdf <- mapply( function(df, w ) {
w <- sub("strain_", "", w)
words <- unlist(strsplit(w, "_vs_", fixed=TRUE))
df <- cbind( df, "mutant"=rep(words[[1]], nrow(df)),
"comparedTo"=rep(words[[2]], nrow(df)))
}, sigresLFCWT[[listitem]], wordList, SIMPLIFY = FALSE, USE.NAMES = FALSE)
collated <- do.call(rbind, newdf)
newfile <- here::here("results", paste0("sigLFC_WTref_",listitem,".csv"))
write.csv(collated, file=newfile, row.names = FALSE)
return (collated)
})
View(sigresLFCWTCol)
names(desresCol) <- nameKey
View(sigresLFCWTCol)
View(desresCol)
View(desresCol)
names(sigresLFCWTCol) <- nameKey
View(sigresLFCWTCol)
sigresLFCWTCol <- lapply(nameKey, function(listitem){
wordList <- names(sigresLFCWT[[listitem]])
newdf <- mapply( function(df, w ) {
w <- sub("strain_", "", w)
words <- unlist(strsplit(w, "_vs_", fixed=TRUE))
df <- cbind( df, "mutant"=rep(words[[1]], nrow(df)),
"comparedTo"=rep(words[[2]], nrow(df)))
}, sigresLFCWT[[listitem]], wordList, SIMPLIFY = FALSE, USE.NAMES = FALSE)
collated <- do.call(rbind, newdf)
newfile <- here::here("results", "pairwise", paste0("sigShrunkRes_WTref_",listitem,".csv"))
write.csv(collated, file=newfile, row.names = FALSE)
return (collated)
})
names(sigresLFCWTCol) <- nameKey
View(maPoints)
View(resLFCWT)
rm(wtest, wordtest, tester)
rm(wtest, wordstest, tester)
testwl <- names(sigresLFCWT[["Full"]])
testwl <- lapply(testwl, function(w){})
testwl <- lapply(testwl, function(w){
w <- sub("strain_", "", w)
w <- sub("_vs_WT", "", w)
return(w)})
View(testwl)
testwl <- names(sigresLFCWT[["Full"]])
rm(labels)
rm(MA)
rm(listitem)
testwordlist <- lapply(testwl, function(w){
w <- sub("strain_", "", w)
w <- sub("_vs_WT", "", w)
return(w)
})
View(testwordlist)
sigresLFCWT <- lapply(setNames(nameKey, nameKey), function(listitem) {
lapply(resLFCWT[[listitem]], function(df) {
if ( !(dim(df)[1] == 0) ){
newdf <- df %>%  data.frame() %>% rownames_to_column(var="locusTag") %>% as_tibble()
newdf <- newdf %>% filter(padj < padj.cutoff & abs(log2FoldChange) > lfc.cutoff)
newdf$abs_log2 <- abs(newdf$log2FoldChange) # Add absolute value column
newanno <- anno_table[(anno_table$locusTag %in% newdf$locusTag), ] %>%
dplyr::select("locusTag", "name", "chromosome") # Subset anno_table to match the shorter list
newdf <- join_all( list(newdf, newanno), by = "locusTag", type = "full" )
}
return (newdf)
})
wordlist <- names(sigresLFCWT[[listitem]])
wordlist <- lapply(wordlist, function(w){
w <- sub("strain_", "", w)
w <- sub("_vs_WT", "", w)
return(w)
})
names(sigresLFCWT[[listitem]]) <- wordlist
})
View(sigresLFCWT)
resLFCWT <- lapply(setNames(nameKey, nameKey), function(listitem){
lapply(setNames(matchups[[listitem]], matchups[[listitem]]), function(eachmatch){
if( as.character(eachmatch) != "Intercept"){
print(eachmatch)
lfcShrink(dds[[listitem]], coef = eachmatch, type = "apeglm")
}
})
})
View(sigresLFCWT)
View(resLFCWT)
sigresLFCWT <- lapply(setNames(nameKey, nameKey), function(listitem) {
lapply(resLFCWT[[listitem]], function(df) {
if ( !(dim(df)[1] == 0) ){
newdf <- df %>%  data.frame() %>% rownames_to_column(var="locusTag") %>% as_tibble()
newdf <- newdf %>% filter(padj < padj.cutoff & abs(log2FoldChange) > lfc.cutoff)
newdf$abs_log2 <- abs(newdf$log2FoldChange) # Add absolute value column
newanno <- anno_table[(anno_table$locusTag %in% newdf$locusTag), ] %>%
dplyr::select("locusTag", "name", "chromosome") # Subset anno_table to match the shorter list
newdf <- join_all( list(newdf, newanno), by = "locusTag", type = "full" )
}
return (newdf)
})
wordlist <- names(sigresLFCWT[[listitem]])
wordlist <- lapply(wordlist, function(w){
w <- sub("strain_", "", w)
w <- sub("_vs_WT", "", w)
return(w)
})
names(sigresLFCWT[listitem]) <- wordlist
})
resLFCWT <- lapply(setNames(nameKey, nameKey), function(listitem){ compact(resLFCWT[[listitem]])}) #Remove blanks
sigresLFCWT <- lapply(setNames(nameKey, nameKey), function(listitem) {
lapply(resLFCWT[[listitem]], function(df) {
if ( !(dim(df)[1] == 0) ){
newdf <- df %>%  data.frame() %>% rownames_to_column(var="locusTag") %>% as_tibble()
newdf <- newdf %>% filter(padj < padj.cutoff & abs(log2FoldChange) > lfc.cutoff)
newdf$abs_log2 <- abs(newdf$log2FoldChange) # Add absolute value column
newanno <- anno_table[(anno_table$locusTag %in% newdf$locusTag), ] %>%
dplyr::select("locusTag", "name", "chromosome") # Subset anno_table to match the shorter list
newdf <- join_all( list(newdf, newanno), by = "locusTag", type = "full" )
}
return (newdf)
})
wordlist <- names(sigresLFCWT[[listitem]])
wordlist <- lapply(wordlist, function(w){
w <- sub("strain_", "", w)
w <- sub("_vs_WT", "", w)
return(w)
})
names(sigresLFCWT[listitem]) <- wordlist
})
View(sigresLFCWT)
View(sigresLFCWT)
sigresLFCWT <- lapply(setNames(nameKey, nameKey), function(listitem) {
lapply(resLFCWT[[listitem]], function(df) {
if ( !(dim(df)[1] == 0) ){
newdf <- df %>%  data.frame() %>% rownames_to_column(var="locusTag") %>% as_tibble()
newdf <- newdf %>% filter(padj < padj.cutoff & abs(log2FoldChange) > lfc.cutoff)
newdf$abs_log2 <- abs(newdf$log2FoldChange) # Add absolute value column
newanno <- anno_table[(anno_table$locusTag %in% newdf$locusTag), ] %>%
dplyr::select("locusTag", "name", "chromosome") # Subset anno_table to match the shorter list
newdf <- join_all( list(newdf, newanno), by = "locusTag", type = "full" )
}
return (newdf)
})
})
View(sigresLFCWT)
sigresLFCWTCol <- lapply(nameKey, function(listitem){
wordList <- names(sigresLFCWT[[listitem]])
newdf <- mapply( function(df, w ) {
w <- sub("strain_", "", w)
words <- unlist(strsplit(w, "_vs_", fixed=TRUE))
df <- cbind( df, "mutant"=rep(words[[1]], nrow(df)),
"comparedTo"=rep(words[[2]], nrow(df)))
}, sigresLFCWT[[listitem]], wordList, SIMPLIFY = FALSE, USE.NAMES = FALSE)
collated <- do.call(rbind, newdf)
newfile <- here::here("results", "pairwise", paste0("sigShrunkRes_WTref_",listitem,".csv"))
write.csv(collated, file=newfile, row.names = FALSE)
return (collated)
})
View(sigresLFCWT)
View(resLFCWT)
view(resLFCWT["TilS_nochr3"]["strain_N445K_vs_WT"])
view(resLFCWT["TilS_nochr3"][["strain_N445K_vs_WT"]])
view(resLFCWT[["TilS_nochr3"]][["strain_N445K_vs_WT"]])
view(resLFCWT["TilS_nochr3"][["strain_A244T_vs_WT"]])
view(resLFCWT[["TilS_nochr3"]][["strain_A244T_vs_WT"]])
any(resLFCWT[["TilS_nochr3"]][["strain_N445K_vs_WT"]]$padj < 0.5)
any(resLFCWT[["TilS_nochr3"]][["strain_N445K_vs_WT"]]$padj < 0.4)
any(resLFCWT[["TilS_nochr3"]][["strain_N445K_vs_WT"]]$padj < 0.3)
> any(resLFCWT[["TilS_nochr3"]][["strain_N445K_vs_WT"]]$padj < 0.35)
any(resLFCWT[["TilS_nochr3"]][["strain_N445K_vs_WT"]]$padj < 0.35)
any(resLFCWT[["TilS_nochr3"]][["strain_N445K_vs_WT"]]$padj < 0.3)
resLFCWT <- lapply(setNames(nameKey, nameKey), function(listitem){
lapply(setNames(matchups[[listitem]], matchups[[listitem]]), function(eachmatch){
if( as.character(eachmatch) != "Intercept"){
fname=here::here("resuts", paste0("LFCShrunk_results", listitem), paste0("LFCShrunk_", eachmatch, ".csv"))
print(eachmatch)
df <- lfcShrink(dds[[listitem]], coef = eachmatch, type = "apeglm")
write.csv(df, file = fname, row.names = FALSE)
}
})
})
resLFCWT <- lapply(setNames(nameKey, nameKey), function(listitem){
lapply(setNames(matchups[[listitem]], matchups[[listitem]]), function(eachmatch){
if( as.character(eachmatch) != "Intercept"){
fname=here::here("resuts", paste0("LFCShrunk_results", listitem), paste0("LFCShrunk_", eachmatch, ".csv"))
print(eachmatch)
df <- lfcShrink(dds[[listitem]], coef = eachmatch, type = "apeglm")
write.csv(df, file = fname, row.names = FALSE)
}
})
})
resLFCWT <- lapply(setNames(nameKey, nameKey), function(listitem){ compact(resLFCWT[[listitem]])}) #Remove blanks
resLFCWT <- lapply(setNames(nameKey, nameKey), function(listitem){
dir.create(here::here("results", paste0("LFCShrunk_results_", listitem)), showWarnings = FALSE)
lapply(setNames(matchups[[listitem]], matchups[[listitem]]), function(eachmatch){
if( as.character(eachmatch) != "Intercept"){
fname=here::here("resuts", paste0("LFCShrunk_results", listitem), paste0("LFCShrunk_", eachmatch, ".csv"))
print(eachmatch)
df <- lfcShrink(dds[[listitem]], coef = eachmatch, type = "apeglm")
write.csv(df, file = fname, row.names = FALSE)
}
})
})
resLFCWT <- lapply(setNames(nameKey, nameKey), function(listitem){
dir.create(here::here("results", paste0("LFCShrunk_results_", listitem)), showWarnings = FALSE)
lapply(setNames(matchups[[listitem]], matchups[[listitem]]), function(eachmatch){
if( as.character(eachmatch) != "Intercept"){
fname=here::here("results", paste0("LFCShrunk_results", listitem), paste0("LFCShrunk_", eachmatch, ".csv"))
print(eachmatch)
df <- lfcShrink(dds[[listitem]], coef = eachmatch, type = "apeglm")
write.csv(df, file = fname, row.names = FALSE)
}
})
})
resLFCWT <- lapply(setNames(nameKey, nameKey), function(listitem){
dir.create(here::here("results", paste0("LFCShrunk_results_", listitem)), showWarnings = FALSE)
lapply(setNames(matchups[[listitem]], matchups[[listitem]]), function(eachmatch){
if( as.character(eachmatch) != "Intercept"){
fname=here::here("results", paste0("LFCShrunk_results_", listitem), paste0("LFCShrunk_", eachmatch, ".csv"))
print(eachmatch)
df <- lfcShrink(dds[[listitem]], coef = eachmatch, type = "apeglm")
write.csv(df, file = fname, row.names = FALSE)
}
})
})
resLFCWT <- lapply(setNames(nameKey, nameKey), function(listitem){ compact(resLFCWT[[listitem]])}) #Remove blanks
View(sigresLFCWT)
View(resLFCWT)
resLFCWT <- lapply(setNames(nameKey, nameKey), function(listitem){
dir.create(here::here("results", paste0("LFCShrunk_results_", listitem)), showWarnings = FALSE)
lapply(setNames(matchups[[listitem]], matchups[[listitem]]), function(eachmatch){
if( as.character(eachmatch) != "Intercept"){
fname=here::here("results", paste0("LFCShrunk_results_", listitem), paste0("LFCShrunk_", eachmatch, ".csv"))
print(eachmatch)
df <- lfcShrink(dds[[listitem]], coef = eachmatch, type = "apeglm")
write.csv(df, file = fname, row.names = FALSE)
}
return(df)
})
})
View(sigresLFCWT)
resLFCWT <- lapply(setNames(nameKey, nameKey), function(listitem){ compact(resLFCWT[[listitem]])}) #Remove blanks
View(resLFCWT)
resLFCWT <- lapply(setNames(nameKey, nameKey), function(listitem){ compact(resLFCWT[[listitem]])}) #Remove blanks
View(resLFCWT)
resLFCWT <- lapply(setNames(nameKey, nameKey), function(listitem){
dir.create(here::here("results", paste0("LFCShrunk_results_", listitem)), showWarnings = FALSE)
lapply(setNames(matchups[[listitem]], matchups[[listitem]]), function(eachmatch){
if( as.character(eachmatch) != "Intercept"){
fname=here::here("results", paste0("LFCShrunk_results_", listitem), paste0("LFCShrunk_", eachmatch, ".csv"))
print(eachmatch)
df <- lfcShrink(dds[[listitem]], coef = eachmatch, type = "apeglm")
write.csv(df, file = fname, row.names = FALSE)
return(df)
}
})
})
resLFCWT <- lapply(setNames(nameKey, nameKey), function(listitem){ compact(resLFCWT[[listitem]])}) #Remove blanks
View(resLFCWT)
# lfcShurnk 0.58 corresponds to 1.5 lf2c
padj.cutoff <- 0.1
lfc.cutoff <- 0.58
sigresLFCWT <- lapply(setNames(nameKey, nameKey), function(listitem) {
lapply(resLFCWT[[listitem]], function(df) {
if ( !(dim(df)[1] == 0) ){
newdf <- df %>%  data.frame() %>% rownames_to_column(var="locusTag") %>% as_tibble()
newdf <- newdf %>% filter(padj < padj.cutoff & abs(log2FoldChange) > lfc.cutoff)
newdf$abs_log2 <- abs(newdf$log2FoldChange) # Add absolute value column
newanno <- anno_table[(anno_table$locusTag %in% newdf$locusTag), ] %>%
dplyr::select("locusTag", "name", "chromosome") # Subset anno_table to match the shorter list
newdf <- join_all( list(newdf, newanno), by = "locusTag", type = "full" )
}
return (newdf)
})
})
sigresLFCWTCol <- lapply(nameKey, function(listitem){
wordList <- names(sigresLFCWT[[listitem]])
newdf <- mapply( function(df, w ) {
w <- sub("strain_", "", w)
words <- unlist(strsplit(w, "_vs_", fixed=TRUE))
df <- cbind( df, "mutant"=rep(words[[1]], nrow(df)),
"comparedTo"=rep(words[[2]], nrow(df)))
}, sigresLFCWT[[listitem]], wordList, SIMPLIFY = FALSE, USE.NAMES = FALSE)
collated <- do.call(rbind, newdf)
newfile <- here::here("results", "pairwise", paste0("sigShrunkRes_WTref_",listitem,".csv"))
write.csv(collated, file=newfile, row.names = FALSE)
return (collated)
})
names(sigresLFCWTCol) <- nameKey
View(sigresLFCWTCol)
View(sigresLFCWT)
# Specify which LFC shrinkage and results sets
singleresLFC <- resLFCWT[["TilS_nochr3"]][["strain_A244T_vs_WT"]]
# Get index number of specific locusTAg
match("Bcen2424_4447", rownames(singleresLFC))
match("Bcen2424_1362", rownames(singleresLFC))
# Specify which LFC shrinkage and results sets
singleresLFC <- resLFCWT[["TilS_nochr3"]][["strain_A244T_vs_WT"]]
# Get index number of specific locusTAg
match("Bcen2424_4447", rownames(singleresLFC))
match("Bcen2424_1362", rownames(singleresLFC))
plotMA(singleresLFC, ylim=c(-2.5,3), main = "A244T vs WT, TilS set with Chromosomes 1&2")
text(singleresLFC$baseMean[highlight], singleresLFC$log2FoldChange[highlight], rownames(singleresLFC)[highlight], pos = 4, cex = 1, offset = 0.5, font = 2)
# Create list of genes of interest
highlight <- c(4333, 1321)
plotMA(singleresLFC, ylim=c(-2.5,3), main = "A244T vs WT, TilS set with Chromosomes 1&2")
text(singleresLFC$baseMean[highlight], singleresLFC$log2FoldChange[highlight], rownames(singleresLFC)[highlight], pos = 4, cex = 1, offset = 0.5, font = 2)
points(singleresLFC$baseMean[highlight], singleresLFC$log2FoldChange[highlight], col = "blue")
plotMA(singleresLFC, ylim=c(-2.5,3), main = "A244T vs WT, TilS set with Chromosomes 1&2")
text(singleresLFC$baseMean[hR], singleresLFC$log2FoldChange[hR], rownames(singleresLFC)[hR], pos = 4, cex = 1, offset = 0.5, font = 2)
text(singleresLFC$baseMean[hL], singleresLFC$log2FoldChange[hL], rownames(singleresLFC)[hL], pos = 2, cex = 1, offset = 0.5, font = 2)
points(singleresLFC$baseMean[highlight], singleresLFC$log2FoldChange[highlight], col = "blue")
hR <- 4333
hL <- 1321
highlight <- c(hR, hL)
plotMA(singleresLFC, ylim=c(-2.5,3), main = "A244T vs WT, TilS set with Chromosomes 1&2")
text(singleresLFC$baseMean[hR], singleresLFC$log2FoldChange[hR], rownames(singleresLFC)[hR], pos = 4, cex = 1, offset = 0.5, font = 2)
text(singleresLFC$baseMean[hL], singleresLFC$log2FoldChange[hL], rownames(singleresLFC)[hL], pos = 2, cex = 1, offset = 0.5, font = 2)
points(singleresLFC$baseMean[highlight], singleresLFC$log2FoldChange[highlight], col = "blue")
plotMA(singleresLFC, ylim=c(-2.5,3), main = "A244T vs WT, TilS set with Chromosomes 1&2")
text(singleresLFC$baseMean[hR], singleresLFC$log2FoldChange[hR], rownames(singleresLFC)[hR], pos = 4, cex = 1, offset = 0.5)
text(singleresLFC$baseMean[hL], singleresLFC$log2FoldChange[hL], rownames(singleresLFC)[hL], pos = 2, cex = 1, offset = 0.5)
points(singleresLFC$baseMean[highlight], singleresLFC$log2FoldChange[highlight], col = "blue")
idxR <- identify(singleresLFC$baseMean, singleresLFC$log2FoldChange, n = 6, tolerance = 0.1, plot = TRUE, pos = 4)
idxR <- identify(singleresLFC$baseMean, singleresLFC$log2FoldChange, n = 6, tolerance = 0.1, plot = FALSE, pos = 4)
idxL <- identify(singleresLFC$baseMean, singleresLFC$log2FoldChange, n = 3, tolerance = 0.1, plot = FALSE, pos = 2)
text(singleresLFC$baseMean[idxL], singleresLFC$log2FoldChange[idxL],
rownames(singleresLFC)[idxL], pos = 2, cex = 0.5, offset = 0.5)
text(singleresLFC[idxL, baseMean], singleresLFC[idxL, log2FoldChange],
rownames(singleresLFC)[idxL], pos = 2, cex = 0.5, offset = 0.5)
text(singleresLFC[idxL, "baseMean"], singleresLFC[idxL, "log2FoldChange"],
rownames(singleresLFC)[idxL], pos = 2, cex = 0.5, offset = 0.5)
View(singleresLFC)
View(singleres)
View(singleresLFC)
View(singleres)
View(singleresLFC)
View(sigresLFCWTCol)
View(singleres)
View(testerall)
View(singleresLFC)
View(singleres)
View(singleresLFC)
View(singleres)
rm(singleres)
rm(testwl, testwordlist)
rm(testerall)
singleres[idxL, "baseMean"]
singleresLFC[idxL, "baseMean"]
tempLFC <- as.data.frame(singleresLFC)
View(tempLFC)
text(tempLFC$baseMean[idxL], tempLFC$log2FoldChange[idxL],
rownames(singleresLFC)[idxL], pos = 2, cex = 0.5, offset = 0.5)
whatis <- singleresLFC$baseMean
whatis[idxL]
idxL <- identify(singleresLFC$baseMean, singleresLFC$log2FoldChange,
n = 3, tolerance = 0.1, plot = FALSE, pos = 2, order = FALSE)
idxL <- identify(singleresLFC$baseMean, singleresLFC$log2FoldChange,
n = 3, tolerance = 0.1, plot = FALSE, pos = FALSE, order = FALSE)
text(singleresLFC$baseMean[idxL], singleresLFC$log2FoldChange[idxL],
rownames(singleresLFC)[idxL], pos = 2, cex = 0.5, offset = 0.5)
plotMA(singleresLFC, ylim=c(-2.5,3), main = "A244T vs WT, TilS set with Chromosomes 1&2")
text(singleresLFC$baseMean[hR], singleresLFC$log2FoldChange[hR], rownames(singleresLFC)[hR], pos = 4, cex = 1, offset = 0.5)
text(singleresLFC$baseMean[hL], singleresLFC$log2FoldChange[hL], rownames(singleresLFC)[hL], pos = 2, cex = 1, offset = 0.5)
points(singleresLFC$baseMean[highlight], singleresLFC$log2FoldChange[highlight], col = "blue")
idxL <- identify(singleresLFC$baseMean, singleresLFC$log2FoldChange,
n = 3, tolerance = 0.1, plot = FALSE, pos = FALSE)
text(singleresLFC$baseMean[idxL], singleresLFC$log2FoldChange[idxL],
rownames(singleresLFC)[idxL], pos = 2, cex = 0.5, offset = 0.2)
idxT <- identify(singleresLFC$baseMean, singleresLFC$log2FoldChange, n = 4, tolerance = 0.1, plot = FALSE, pos = FALSE)
idxT <- identify(singleresLFC$baseMean, singleresLFC$log2FoldChange, n = 4, tolerance = 0.1, plot = FALSE, pos = FALSE)
text(singleresLFC$baseMean[idxT], singleresLFC$log2FoldChange[idT],
rownames(singleresLFC)[idxT], pos = 3, cex = 0.5, offset = 0.2)
text(singleresLFC$baseMean[idxT], singleresLFC$log2FoldChange[idxT],
rownames(singleresLFC)[idxT], pos = 3, cex = 0.5, offset = 0.2)
idxL <- identify(singleresLFC$baseMean, singleresLFC$log2FoldChange, n = 6, tolerance = 0.1, plot = FALSE, pos = FALSE)
text(singleresLFC$baseMean[idxL], singleresLFC$log2FoldChange[idxL],
rownames(singleresLFC)[idxL], pos = 2, cex = 0.5, offset = 0.2)
idxT <- identify(singleresLFC$baseMean, singleresLFC$log2FoldChange, n = 2, tolerance = 0.1, plot = FALSE, pos = FALSE)
idxR <- identify(singleresLFC$baseMean, singleresLFC$log2FoldChange, n = 9, tolerance = 0.1, plot = FALSE, pos = FALSE)
text(singleresLFC$baseMean[idxR], singleresLFC$log2FoldChange[idxR],
rownames(singleresLFC)[idxR], pos = 4, cex = 0.5, offset = 0.2)
idxT <- identify(singleresLFC$baseMean, singleresLFC$log2FoldChange, n = 1, tolerance = 0.1, plot = FALSE, pos = FALSE)
text(singleresLFC$baseMean[idxT], singleresLFC$log2FoldChange[idxT],
rownames(singleresLFC)[idxT], pos = 3, cex = 0.5, offset = 0.2)
idxB <- identify(singleresLFC$baseMean, singleresLFC$log2FoldChange, n = 1, tolerance = 0.1, plot = FALSE, pos = FALSE)
idx <- identify(singleresLFC$baseMean, singleresLFC$log2FoldChange, n = 3, tolerance = 0.1, plot = FALSE, pos = FALSE)
text(singleresLFC$baseMean[idx][1], singleresLFC$log2FoldChange[idx][1],
rownames(singleresLFC)[idx], pos = 3, cex = 0.5, offset = 0.2)
interest <- idx
