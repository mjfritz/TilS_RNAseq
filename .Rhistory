query <- anno_table[listitem, "attributes"]
if ( query == "") ntag <- paste0("New-", anno_table[listitem, "locusTag"])
else {
temp <- regmatches(query, regexpr("Bcen2424_\\d{4}", query))
if ( identical(temp, character(0)) ) ntag <- paste0("New-", anno_table[listitem, "locusTag"])
else ntag <- temp
}
return(ntag)
})
names(gbLocusTag) <- row.names(anno_table)
View(gbLocusTag)
anno_table <- rbind(anno_table, gbLocusTag)
anno_table <- cbind(anno_table, gbLocusTag)
featurefile <- here::here("data", "references", "GCF_000203955.1_ASM20395v1_feature_table.txt")
anno_table <- parse_RS_annotatifon(featurefile) # For RefSeq, use parse_GB_annotation for GenBank
featurefile <- here::here("data", "references", "GCF_000203955.1_ASM20395v1_feature_table.txt")
anno_table <- parse_RS_annotation(featurefile) # For RefSeq, use parse_GB_annotation for GenBank
nrow(anno_table)
gbLocusTag <- vector("list", nrow(anno_table))
gbLocusTag <- lapply( row.names(anno_table), function(listitem){
query <- anno_table[listitem, "attributes"]
if ( query == "") ntag <- paste0("New-", anno_table[listitem, "locusTag"])
else {
temp <- regmatches(query, regexpr("Bcen2424_\\d{4}", query))
if ( identical(temp, character(0)) ) ntag <- paste0("New-", anno_table[listitem, "locusTag"])
else ntag <- temp
}
return(ntag)
})
names(gbLocusTag) <- row.names(anno_table)
anno_table <- cbind(anno_table, gbLocusTag)
View(anno_table)
rm(anno_table)
featurefile <- here::here("data", "references", "GCF_000203955.1_ASM20395v1_feature_table.txt")
anno_table <- parse_RS_annotation(featurefile) # For RefSeq, use parse_GB_annotation for GenBank
nrow(anno_table)
featurefile <- here::here("data", "references", "GCF_000203955.1_ASM20395v1_feature_table.txt")
anno_table <- parse_RS_annotation(featurefile) # For RefSeq, use parse_GB_annotation for GenBank
nrow(anno_table)
gbLocusTag <- unlist(gbLocusTag)
names(gbLocusTag) <- row.names(anno_table)
anno_table <- cbind(anno_table, gbLocusTag)
View(anno_table)
gbLocusTag <- vector("character", nrow(anno_table))
featurefile <- here::here("data", "references", "GCF_000203955.1_ASM20395v1_feature_table.txt")
anno_table <- parse_RS_annotation(featurefile) # For RefSeq, use parse_GB_annotation for GenBank
nrow(anno_table)
gbLocusTag <- lapply( row.names(anno_table), function(listitem){
query <- anno_table[listitem, "attributes"]
if ( query == "") ntag <- paste0("New-", anno_table[listitem, "locusTag"])
else {
temp <- regmatches(query, regexpr("Bcen2424_\\d{4}", query))
if ( identical(temp, character(0)) ) ntag <- paste0("New-", anno_table[listitem, "locusTag"])
else ntag <- temp
}
return(ntag)
})
View(gbLocusTag)
gbLocusTag <- unlist(gbLocusTag)
names(gbLocusTag) <- row.names(anno_table)
anno_table <- cbind(anno_table, gbLocusTag)
View(dds)
view(dds[[1]])
dds[[1]]
gbLocusTag <- vector("character", nrow(anno_table))
gbLocusTag <- lapply( row.names(anno_table), function(listitem){
query <- anno_table[listitem, "attributes"]
if ( query == "") ntag <- paste0("New-", anno_table[listitem, "locusTag"])
else {
temp <- regmatches(query, regexpr("Bcen2424_\\d{4}", query))
if ( identical(temp, character(0)) ) ntag <- anno_table[listitem, "locusTag"]
else ntag <- temp
}
return(ntag)
})
gbLocusTag <- unlist(gbLocusTag)
names(gbLocusTag) <- row.names(anno_table)
anno_table <- cbind(anno_table, gbLocusTag)
gbLocusTag <- vector("character", nrow(anno_table))
gbLocusTag <- lapply( row.names(anno_table), function(listitem){
query <- anno_table[listitem, "attributes"]
if ( query == "") ntag <- paste0("New-", anno_table[listitem, "locusTag"])
else {
temp <- regmatches(query, regexpr("Bcen2424_\\d{4}", query))
if ( identical(temp, character(0)) ) ntag <- anno_table[listitem, "locusTag"]
else ntag <- temp
}
return(ntag)
})
gbLocusTag <- unlist(gbLocusTag)
names(gbLocusTag) <- row.names(anno_table)
anno_table <- cbind(anno_table, gbLocusTag)
names(anno_table)[names(anno_table) == "locusTag"] <- "RSlocusTag"
names(anno_table)[names(anno_table) == "gblocusTag"] <- "locusTag"
anno_table <- anno_table %>% dplyr::select("locusTag", everything())
View(anno_table)
rm(anno_table)
featurefile <- here::here("data", "references", "GCF_000203955.1_ASM20395v1_feature_table.txt")
anno_table <- parse_RS_annotation(featurefile) # For RefSeq, use parse_GB_annotation for GenBank
nrow(anno_table)
gbLocusTag <- vector("character", nrow(anno_table))
gbLocusTag <- lapply( row.names(anno_table), function(listitem){
query <- anno_table[listitem, "attributes"]
if ( query == "") ntag <- paste0("New-", anno_table[listitem, "locusTag"])
else {
temp <- regmatches(query, regexpr("Bcen2424_\\d{4}", query))
if ( identical(temp, character(0)) ) ntag <- anno_table[listitem, "locusTag"]
else ntag <- temp
}
return(ntag)
})
gbLocusTag <- unlist(gbLocusTag)
names(gbLocusTag) <- row.names(anno_table)
anno_table <- cbind(anno_table, gbLocusTag)
names(anno_table)[names(anno_table) == "locusTag"] <- "RSlocusTag"
names(anno_table)[names(anno_table) == "gblocusTag"] <- "locusTag"
anno_table <- anno_table %>% dplyr::select("locusTag", everything())
View(anno_table)
names(anno_table)[names(anno_table) == "gbLocusTag"] <- "locusTag"
anno_table <- anno_table %>% dplyr::select("locusTag", everything())
View(anno_table)
row.names(anno_table) <- annotable[ ,1]
row.names(anno_table) <- anno_table[ ,1]
View(anno_table)
return (anno_table)
featurefile <- here::here("data", "references", "GCF_000203955.1_ASM20395v1_feature_table.txt")
anno_table <- parse_RS_annotation(featurefile) # For RefSeq, use parse_GB_annotation for GenBank
nrow(anno_table)
View(anno_table)
featurefile <- here::here("data", "references", "GCF_000203955.1_ASM20395v1_feature_table.txt")
anno_table <- parse_RS_annotation(featurefile) # For RefSeq, use parse_GB_annotation for GenBank
nrow(anno_table)
View(anno_table)
rm(anno_table)
source(here::here("scripts", "deseq_workflow_expanded_mk3.r"), local=TRUE, echo=FALSE)
featurefile <- here::here("data", "references", "GCF_000203955.1_ASM20395v1_feature_table.txt")
anno_table <- parse_RS_annotation(featurefile) # For RefSeq, use parse_GB_annotation for GenBank
nrow(anno_table)
View(anno_table)
locusKey <- row.names(anno_table)
identical(row.names(allMatrix), anno_table$RSlocusTag)
View(allMatrix)
row.names(locusKey) <- anno_table$RSlocusTag
names(locusKey) <- anno_table$RSlocusTag
naesm(gbLocusTag)
names(gbLocusTag)
rm(locusKey)
locusKey <- row.names(anno_table)
names(locusKey) <- anno_table$RSlocusTag
View(allMatrix)
lapply(names(locusKey), function(listitem){
rownames(allMatrix)[listitem] <- locusKey[listitem]
})
lapply(names(locusKey), function(listitem){
if (listitem %in% rownames(allMatrix))  rownames(allMatrix)[listitem] <- locusKey[listitem]
})
rownames(allMatrix)
lapply(names(locusKey), function(listitem){
if (listitem %in% rownames(allMatrix)){
rownames(allMatrix)[listitem] <- locusKey[listitem]
}
})
lapply(names(locusKey), function(listitem){
if (listitem %in% rownames(allMatrix)){
rownames(allMatrix)[ rownames(allMatrix) == listitem] <- locusKey[listitem]
}
})
View(allMatrix)
names(locusKey)
allMatrix <- read_table_counts(here::here("data", "abundance.all.matrix.tsv"))
nrow(allMatrix)
allDesign <- read_table_design(here::here("data", "abundance.all.design.tsv"))
locusKey <- row.names(anno_table)
names(locusKey) <- anno_table$RSlocusTag
invisible(lapply(names(locusKey), function(listitem){
if (listitem %in% rownames(allMatrix)){
rownames(allMatrix)[ rownames(allMatrix) == listitem] <- locusKey[listitem]
}
}))
annonames <- rownames(anno_table)
matrixnames <- rownames(allMatrix)
missingnames <- annonames[!(annonames %in% matrixnames)]
print(missingnames)
View(allMatrix)
for ( listitem in names(locusKey)){
if (listitem %in% rownames(allMatrix)){
rownames(allMatrix)[ rownames(allMatrix) == listitem] <- locusKey[listitem]
}
}
View(allMatrix)
t <- names(locusKey)[2]
f %in% rownames(allMatrix)
t %in% rownames(allMatrix)
names(locusKey)[6] %in% rownames(allMatrix)
names(locusKey)
names(locusKey)[9] %in% rownames(allMatrix)
tMatrix <- allMatrix[1:50, ]
rownames(tMatrix)[ rownames(tMatrix) == names(locusKey)[9] ] <- locusKey[9]
View(tMatrix)
tester <- names(locusKey)[9]
rownames(tMatrix)[ rownames(tMatrix) == tester ]
locusKey[9]
locusKey[[9]]
view(locusKey)
source(here::here("scripts", "deseq_workflow_expanded_mk3.r"), local=TRUE, echo=FALSE)
featurefile <- here::here("data", "references", "GCF_000203955.1_ASM20395v1_feature_table.txt")
allMatrix <- read_table_counts(here::here("data", "abundance.all.matrix.tsv"))
nrow(allMatrix)
allDesign <- read_table_design(here::here("data", "abundance.all.design.tsv"))
locusKey <- row.names(anno_table)
names(locusKey) <- anno_table$RSlocusTag
View(allMatrix)
view(locusKey)
locusKey[BCEN2424_RS01415]
locusKey["BCEN2424_RS01415""]
locusKey["BCEN2424_RS01415"]
locusKey["BCEN2424_RS00365"]
tester <- BCEN2424_RS00365
tester <- "BCEN2424_RS00365"
tMatrix
tMatrix <- allMatrix[1:200,]
allMatrix <- read_table_counts(here::here("data", "abundance.all.matrix.tsv"))
nrow(allMatrix)
allDesign <- read_table_design(here::here("data", "abundance.all.design.tsv"))
locusKey <- row.names(anno_table)
names(locusKey) <- anno_table$RSlocusTag
tMatrix <- allMatrix[1:200, ]
View(allMatrix)
View(tMatrix)
rownames(tMatrix)[ rownames(tMatrix) == tester ]
locusKey[tester]
rownames(tMatrix)[ rownames(tMatrix) == tester ] <- locusKey[tester]
tMatrix[tester, ]
locusKey[[tester]]
rownames(tMatrix)[ rownames(tMatrix) == tester ] <- locusKey[[tester]]
tMatrix[tester, ]
rownames(tMatrix)[[ rownames(tMatrix) == tester ]] <- locusKey[[tester]]
rownames(tMatrix)[ rownames(tMatrix) == tester ] <- locusKey[[tester]]
tester %in% rownames(tMatrix)
newtester <- locusKey[[tester]]
tMatrix[newtester]
tMatrix[newtester, ]
for ( listitem in names(locusKey)){
if (listitem %in% rownames(allMatrix)){
rownames(allMatrix)[ rownames(allMatrix) == listitem] <- locusKey[[listitem]}
for ( listitem in names(locusKey)){
if (listitem %in% rownames(allMatrix)){
rownames(allMatrix)[ rownames(allMatrix) == listitem] <- locusKey[[listitem]]
}
}
View(allMatrix)
View(desresSig)
library(dplyr)
library(tidyverse)
library(DESeq2)
library(knitr)
library(apeglm)
library(here)
library(pcaExplorer)
library(genefilter)
library(pheatmap)
library(RColorBrewer)
library(viridis)
library(GenomicFeatures)
source(here::here("scripts", "deseq_workflow_expanded_mk3.r"), local=TRUE, echo=FALSE)
featurefile <- here::here("data", "references", "GCF_000203955.1_ASM20395v1_feature_table.txt")
anno_table <- parse_RS_annotation(featurefile) # For RefSeq, use parse_GB_annotation for GenBank
nrow(anno_table)
allMatrix <- read_table_counts(here::here("data", "abundance.all.matrix.tsv"))
nrow(allMatrix)
allDesign <- read_table_design(here::here("data", "abundance.all.design.tsv"))
locusKey <- row.names(anno_table)
names(locusKey) <- anno_table$RSlocusTag
for ( listitem in names(locusKey)){
if (listitem %in% rownames(allMatrix)){
rownames(allMatrix)[ rownames(allMatrix) == listitem] <- locusKey[[listitem]]
}
}
annonames <- rownames(anno_table)
matrixnames <- rownames(allMatrix)
missingnames <- annonames[!(annonames %in% matrixnames)]
print(missingnames)
View(allDesign)
View(allMatrix)
tilSDesign <- allDesign[(allDesign$type %in% "tils"), ]
tilSMatrix <- allMatrix[ , rownames(tilSDesign)]
ppcDesign <- allDesign[(allDesign$type %in% "ppc") | (allDesign$strain == "WT"), ]
ppcMatrix <- allMatrix[ , rownames(ppcDesign)]
# Full data set: with and without chromosome 3
desOutFull <- des_workflow("results/DESeq2_Results_Full", allMatrix, "plmd", allDesign, anno_table)
doFull <- des_workflow("results/DESeq2_Results_Full_noChrom3", allMatrix, "both", allDesign , anno_table)
# TilS subset: with and without chromosome 3
desOutTilS <- des_workflow("results/DESeq2_Results_TilS", tilSMatrix, "plmd", tilSDesign, anno_table)
doTilS <- des_workflow("results/DESeq2_Results_TilS_noChrom3", tilSMatrix, "both", tilSDesign , anno_table)
# PPC subset: with and without chromosome 3
desOutPPC <- des_workflow("results/DESeq2_Results_PPC", ppcMatrix, "plmd", ppcDesign, anno_table)
doPPC <- des_workflow("results/DESeq2_Results_PPC_noChrom3", ppcMatrix, "both", ppcDesign , anno_table)
dds <- list(desOutFull[[1]], doFull[[1]], desOutTilS[[1]], doTilS[[1]], desOutPPC[[1]], doPPC[[1]])
desres <- list(desOutFull[[2]], doFull[[2]], desOutTilS[[2]], doTilS[[2]], desOutPPC[[2]], doPPC[[2]])
nameKey <- c("Full", "Full_nochr3", "TilS", "TilS_nochr3", "PPC", "PPC_nochr3")
names(dds) <- nameKey
names(desres) <- nameKey
rm(desOutFull, desOutTilS, desOutPPC, doFull, doTilS, doPPC) # Clean up
desresSig <- lapply(desres, function(matrixof) {
lapply(matrixof[ ,1], function(df) {
newdf <- tibble::rownames_to_column(newdf, var="Gene")
newdf <- df[order(df$pvalue), ]
newdf <- subset(newdf, padj<0.1)
newdf <- as.data.frame(newdf)
newanno <- vector("character", nrow(newdf))
names(newanno) <- rownames(newdf)
for (listitem in rownames(newdf)){
newanno[listitem] <- anno_table[listitem, "name"]
}
newdf <- merge(as.dataframe(newdf), as.dataframe(newanno), by="row.names", all=TRUE)
#     shortAno <- anno_table[anno_table$locusTag %in% newdf$Gene, ]
#     newdf$annotation <- shortAno$name
return (newdf)
})
})
desresSig <- lapply(desres, function(matrixof) {
lapply(matrixof[ ,1], function(df) {
df <- df[order(df$pvalue), ]
newdf <- tibble::rownames_to_column(df, var="Gene")
newdf <- subset(newdf, padj<0.1)
newdf <- as.data.frame(newdf)
newanno <- vector("character", nrow(newdf))
names(newanno) <- rownames(newdf)
for (listitem in rownames(newdf)){
newanno[listitem] <- anno_table[listitem, "name"]
}
newdf <- merge(newdf, as.dataframe(newanno), by="row.names", all=TRUE)
#     shortAno <- anno_table[anno_table$locusTag %in% newdf$Gene, ]
#     newdf$annotation <- shortAno$name
return (newdf)
})
})
desresSig <- lapply(desres, function(matrixof) {
lapply(matrixof[ ,1], function(df) {
newdf <- df[order(df$pvalue), ]
newdf <- subset(newdf, padj<0.1)
newdf <- as.data.frame(newdf)
newdf <- tibble::rownames_to_column(newdf, var="Gene")
newanno <- vector("character", nrow(newdf))
names(newanno) <- rownames(newdf)
for (listitem in rownames(newdf)){
newanno[listitem] <- anno_table[listitem, "name"]
}
newdf <- merge(newdf, as.dataframe(newanno), by="row.names", all=TRUE)
#     shortAno <- anno_table[anno_table$locusTag %in% newdf$Gene, ]
#     newdf$annotation <- shortAno$name
return (newdf)
})
})
desresSig <- lapply(desres, function(matrixof) {
lapply(matrixof[ ,1], function(df) {
newdf <- df[order(df$pvalue), ]
newdf <- subset(newdf, padj<0.1)
newdf <- as.data.frame(newdf)
newdf <- tibble::rownames_to_column(newdf, var="Gene")
newanno <- vector("character", nrow(newdf))
names(newanno) <- rownames(newdf)
for (listitem in rownames(newdf)){
newanno[listitem] <- anno_table[listitem, "name"]
}
newdf <- merge(newdf, as.data.frame(newanno), by="row.names", all=TRUE)
#     shortAno <- anno_table[anno_table$locusTag %in% newdf$Gene, ]
#     newdf$annotation <- shortAno$name
return (newdf)
})
})
View(desresSig)
desresCol <- lapply(nameKey, function(listitem){
wordList <- as.list(names(desresSig[[listitem]]))
newdf <- mapply( function(df, w ) {words <- unlist(strsplit(w, "_to_", fixed=TRUE))
df <- cbind( df, "mutant"=rep(words[[1]], nrow(df)),
"comparedTo"=rep(words[[2]], nrow(df)))
}, desresSig[[listitem]], wordList, SIMPLIFY = FALSE, USE.NAMES = FALSE)
collated <- do.call(rbind, newdf)
newfile <- here::here("results", paste0("collated_sigRes_",listitem,".csv"))
write.csv(collated, file=newfile, row.names = FALSE)
return (collated)
})
View(anno_table)
desresSig <- lapply(desres, function(matrixof) {
lapply(matrixof[ ,1], function(df) {
newdf <- df[order(df$pvalue), ]
newdf <- subset(newdf, padj<0.1)
newdf <- as.data.frame(newdf)
# newdf <- tibble::rownames_to_column(newdf, var="Gene")
newanno <- vector("character", nrow(newdf))
names(newanno) <- rownames(newdf)
for (listitem in rownames(newdf)){
newanno[listitem] <- anno_table[listitem, "name"]
}
newdf <- merge(newdf, as.data.frame(newanno), by="row.names", all=TRUE)
#     shortAno <- anno_table[anno_table$locusTag %in% newdf$Gene, ]
#     newdf$annotation <- shortAno$name
return (newdf)
})
})
desresCol <- lapply(nameKey, function(listitem){
wordList <- as.list(names(desresSig[[listitem]]))
newdf <- mapply( function(df, w ) {words <- unlist(strsplit(w, "_to_", fixed=TRUE))
df <- cbind( df, "mutant"=rep(words[[1]], nrow(df)),
"comparedTo"=rep(words[[2]], nrow(df)))
}, desresSig[[listitem]], wordList, SIMPLIFY = FALSE, USE.NAMES = FALSE)
collated <- do.call(rbind, newdf)
newfile <- here::here("results", paste0("collated_sigRes_",listitem,".csv"))
write.csv(collated, file=newfile, row.names = FALSE)
return (collated)
})
rld <- lapply(setNames(nameKey, nameKey), function(listitem){
rlog(dds[[listitem]], blind=FALSE)
})
selector <- vector("list", 8)
selector <- lapply(setNames(nameKey,nameKey), function(listitem){
order(rowMeans(counts(dds[[listitem]], normalized=TRUE)), decreasing=TRUE)[1:20]
})
titles <- c("Full Data Set", "Full Data Set, without chromosome 3",
"TilS Subset", "TilS Subset, without chromosome 3",
"PPC Subset", "PPC Subset, without chromosome 3")
names(titles) <- nameKey
df <- as.data.frame(colData(dds[[1]])[,c("strain","type")]) #this is just a key
dir.create(here::here("results", "count_heatmaps"), showWarnings = FALSE)
heatmaps <- lapply(setNames(nameKey,nameKey), function(listitem){
pheatmap(assay(rld[[listitem]])[selector[[listitem]],], cluster_rows=FALSE, show_rownames=FALSE,
cluster_cols=FALSE, annoation_col=df, color = magma(255, begin = 0.15),
main = paste0("Heatmap of Count Matrix for ", titles[[listitem]]),
filename = here::here("results", "count_heatmaps", paste0("rld_heatmap_", listitem, ".pdf")))
})
colors <- colorRampPalette( rev(brewer.pal(9, "PuBuGn")) )(255)
sampleDists <- vector("list", 8)
sampleDists <- lapply(setNames(nameKey,nameKey), function(listitem){
sampleDists[[listitem]] <- dist(t(assay(rld[[listitem]])))
})
dir.create(here::here("results", "rld_clustering"), showWarnings = FALSE)
# pdf(file=here::here("results", "rld_clustering", "rldclusterings_All.pdf"))
rldclusters <- lapply(nameKey, function(listitem){
fname <- here::here("results", "rld_clustering", paste0("rldclustering_", listitem, ".pdf"))
clustering_plot(sampleDists[[listitem]], rld[[listitem]], colors, titles[[listitem]], fname)
})
# dev.off()
topVarGenes <- lapply(setNames(nameKey,nameKey), function(listitem){
head(order(rowVars(assay(rld[[listitem]])), decreasing = TRUE), 50)
})
topVarEntries <- vector("list", length(nameKey))
topVarEntries <- lapply(setNames(nameKey, nameKey), function(listitem){
topVarEntries[[listitem]]  <- assay(rld[[listitem]])[ topVarGenes[[listitem]], ]
})
dir.create(here::here("results", "topGenes_byVariance_acrossDataset"), showWarnings = FALSE)
topVarEntriesAno <- vector("list", length(nameKey))
topVarEntriesAno <- lapply(setNames(nameKey, nameKey), function(listitem){
topVarEntriesAno[[listitem]] <- as.data.frame(topVarEntries[[listitem]])
newanno <- vector("character", nrow(topVarEntriesAno[[listitem]]))
names(newanno) <- rownames(topVarEntriesAno[[listitem]])
for (entries in rownames(topVarEntires[[listitem]])){
newanno[listitem] <- anno_table[listitem, "name"]
}
topVarEntriesAno[[listitem]] <- merge(topVarEntriesAno[[listitem]], as.data.frame(newanno), by="row.names", all=TRUE)
fname <- here::here("results", "topGenes_byVariance_acrossDataset", paste0("TopVarianceGenes_",listitem,".csv"))
write.csv(topVarEntriesAno[[listitem]], file=fname, row.names=FALSE)
})
topVarGenes <- lapply(setNames(nameKey,nameKey), function(listitem){
head(order(rowVars(assay(rld[[listitem]])), decreasing = TRUE), 50)
})
topVarEntries <- vector("list", length(nameKey))
topVarEntries <- lapply(setNames(nameKey, nameKey), function(listitem){
topVarEntries[[listitem]]  <- assay(rld[[listitem]])[ topVarGenes[[listitem]], ]
})
dir.create(here::here("results", "topGenes_byVariance_acrossDataset"), showWarnings = FALSE)
topVarEntriesAno <- vector("list", length(nameKey))
topVarEntriesAno <- lapply(setNames(nameKey, nameKey), function(listitem){
topVarEntriesAno[[listitem]] <- as.data.frame(topVarEntries[[listitem]])
newanno <- vector("character", nrow(topVarEntriesAno[[listitem]]))
names(newanno) <- rownames(topVarEntriesAno[[listitem]])
for (entries in rownames(topVarEntries[[listitem]])){
newanno[entries] <- anno_table[entries, "name"]
}
topVarEntriesAno[[listitem]] <- merge(topVarEntriesAno[[listitem]], as.data.frame(newanno), by="row.names", all=TRUE)
fname <- here::here("results", "topGenes_byVariance_acrossDataset", paste0("TopVarianceGenes_",listitem,".csv"))
write.csv(topVarEntriesAno[[listitem]], file=fname, row.names=FALSE)
})
pheat <- lapply(setNames(nameKey, nameKey), function(listitem){
mat  <- topVarEntries[[listitem]] - rowMeans(topVarEntries[[listitem]])
anno <- as.data.frame(colData(rld[[listitem]])[, c("strain","type")])
fname <- here::here("results", "topGenes_byVAriance_acrossDataset", paste0("geneVarCluster_", listitem, ".pdf"))
pheatmap(mat, annotation_col = anno, fontsize_number = 2,
cellwidth = 12, cellheight = 9,
main=paste0("Clustering of Highest Variance Genes for ", titles[[listitem]]),
filename = fname)
})
mutantColors <- brewer.pal(8, "Set1")
names(mutantColors) <- levels(allDesign$strain)
dir.create(here::here("results","pca"), showWarnings = FALSE)
pcas <- lapply(setNames(nameKey,nameKey), function(listitem) {
pcaData <- plotPCA(rld[[listitem]], intgroup=c("strain", "type"), returnData=TRUE)
percentVar <- round(100 * attr(pcaData, "percentVar"))
fname <- here::here("results", "pca", paste0("pcaPlot_", listitem, ".pdf"))
p <- ggplot(pcaData, aes(PC1, PC2, color=strain, shape=type)) +
geom_point(size=3) +
xlab(paste0("PC1: ",percentVar[1],"% variance")) +
ylab(paste0("PC2: ",percentVar[2],"% variance")) +
coord_fixed() +
ggtitle(paste0("Principle Component Analysis, ",listitem)) +
theme(plot.title = element_text(hjust = 0.5)) +
scale_color_manual(values = mutantColors)
ggsave(fname, device = "pdf")
plot(p)
})
dev.off()
dev.list()
