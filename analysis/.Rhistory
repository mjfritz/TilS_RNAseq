View(snps_noref)
#remove common mutations
snps_gene_noref <- df_snp[ !(df_snp$gene %in% ancestor_snps$Gene), ]
nrow(snps_gene_noref)#244
#save first tab as csv then convert to no utf characters
system("iconv -c -f utf-8 -t ascii /Users/mjf123/Documents/PA14/Breseq_output.csv > /Users/mjf123/Documents/PA14/Breseq_output_noutf.csv")
View(Breseq_output_noutf.csv)
#save first tab as csv then convert to no utf characters
Breseq_output_noutf<- iconv(/Users/mjf123/Documents/PA14/Breseq_output.csv, from = "utf-8" to = "ascii")
system(iconv( -l))
system(iconv( -ls))
system(iconv( -help))
system(iconv -ls)
system(iconv -l)
system(iconv)
df_snp <- read.csv("/Users/mjf123/Documents/PA14/Breseq_output_noutf.csv",header=TRUE)
nrow(df_snp) #counts
#read in a file containing snps present in the ancestor
ancestor_snps <- read.csv("/Users/mjf123/Documents/PA14/ancestor_snps_Breseq35.csv",header=TRUE)
snps_noref <- df_snp[ !(df_snp$position %in% ancestor_snps$Position), ]
nrow(snps_noref)#244
snps_noref <- df_snp[ !(df_snp$position %in% ancestor_snps$position), ]
nrow(snps_noref)
write(snps_noref, 'Breseq_snps_noRef_byPos.csv') #export as csv
write(snps_noref, "/Users/mjf123/Documents/PA14/Breseq_snps_noRef_byPos.csv") #export as csv
write.csv(snps_noref, "/Users/mjf123/Documents/PA14/Breseq_snps_noRef_byPos.csv") #export as csv
write.csv(snps_noref, "/Users/mjf123/Documents/PA14/Breseq_snps_noRef_byPos.csv", row.names=FALSE) #export as csv
snps_gene_noref <- df_snp[ !(df_snp$gene %in% ancestor_snps$gene), ]
nrow(snps_gene_noref)#
b13_snps <- read.csv("/Users/mjf123/Documents/PA14/b13_snps_noRef.csv",header=TRUE) #read in no antibiotic
nrow(b13_snps)
Wa13_snps_noRef <-read.csv("/Users/mjf123/Documents/PA14/Wa13_snps_noRef.csv",header = TRUE)
nrow(Wa13_snps_noRef)
We13_snps_noRef <-read.csv("/Users/mjf123/Documents/PA14/We13_snps_noRef.csv",header = TRUE)
nrow(We13_snps_noRef)
Wa13_snps_noRef_noCom <- Wa13_snps_noRef[ !(Wa13_snps_noRef$position %in% b13_snps$position) ]
nrow(Wa13_snps_noRef_noCom)#count
b13_snps <- read.csv("/Users/mjf123/Documents/PA14/b13_snps_noRef.csv",header = TRUE) #read in no antibiotic
nrow(b13_snps) #count 267
Wa13_snps_noRef <-read.csv("/Users/mjf123/Documents/PA14/Wa13_snps_noRef.csv",header = TRUE)
nrow(Wa13_snps_noRef) #count 256
We13_snps_noRef <-read.csv("/Users/mjf123/Documents/PA14/We13_snps_noRef.csv",header = TRUE)
nrow(We13_snps_noRef) #count 258
Wa13_snps_noRef_noCom <- Wa13_snps_noRef[ !(Wa13_snps_noRef$position %in% b13_snps$position), ]
nrow(Wa13_snps_noRef_noCom)#count
write.csv(Wa13_snps_noRef_noCom, "/Users/mjf123/Documents/PA14/Wa13_snps_noRef_noCom.csv", header = TRUE)
write.csv(Wa13_snps_noRef_noCom, "/Users/mjf123/Documents/PA14/Wa13_snps_noRef_noCom.csv", row.names = FALSE)
We13_snps_noRef_noCom <- We13_snps_noRef[ !(We13_snps_noRef$position %in% b13_snps$position), ]
nrow(We13_snps_noRef_noCom)#count
write.csv(We13_snps_noRef_noCom, "/Users/mjf123/Documents/PA14/We13_snps_noRef_noCom.csv", row.names = FALSE)
# This will potentially write what is shared among the populations
shared_snps_b13_Wa13 <- b13_snps[ b13_snps$position %in% Wa13_snps_noRef, ]
nrow(shared_snps_b13_Wa13)#
# This will potentially write what is shared among the populations
shared_snps_b13_Wa13 <- b13_snps[ b13_snps$position %in% Wa13_snps_noRef$position, ]
nrow(shared_snps_b13_Wa13)#
write.csv(shared_snps_b13_Wa13, "/Users/mjf123/Documents/PA14/shared_snps_b13_Wa13.csv", row.names = FALSE)
shared_snps_b13_We13 <- b13_snps[ b13_snps$position %in% We13_snps_noRef$position, ]
nrow(shared_snps_b13_We13)#
write.csv(shared_snps_b13_We13, "/Users/mjf123/Documents/PA14/shared_snps_b13_We13.csv", row.names = FALSE)
df_Clones_snp <- read.csv("/Users/mjf123/Documents/PA14/Breseq_output_Clones_noutf.csv",header=TRUE)
nrow(df_Clones_snp) #counts 1317
snps_Clones_noref <- df_Clones_snp[ !(df_Clones_snp$position %in% ancestor_snps$position), ]
nrow(snps_Clones_noref) #counts
write.csv(snps_Clones_noref, "/Users/mjf123/Documents/PA14/Breseq_snps_Clones_noRef_byPos.csv", row.names=FALSE) #export as csv
#read in a file containing snps present in the ancestor
ancestor_snps <- read.csv("/Users/mjf123/Documents/PA14/ancestor_snps_Breseq35.csv",header=TRUE)
snps_Clones_noref <- df_Clones_snp[ !(df_Clones_snp$position %in% ancestor_snps$position), ]
nrow(snps_Clones_noref) #counts
write.csv(snps_Clones_noref, "/Users/mjf123/Documents/PA14/Breseq_snps_Clones_noRef_byPos.csv", row.names=FALSE) #export as csv
#remove mutations common to evolved population without antibiotics by position
clones_snps_noRef_noCom <- snps_Clones_noRef[ !(snps_Clones_noRef$position %in% b13_snps$position), ]
#read in a file containing snps present in the ancestor
ancestor_snps <- read.csv("/Users/mjf123/Documents/PA14/ancestor_snps_Breseq35.csv",header=TRUE)
# Separated the populations manually
b13_snps <- read.csv("/Users/mjf123/Documents/PA14/b13_snps_noRef.csv",header = TRUE) #read in no antibiotic
#Repeating removing the ancestors from the clones
df_Clones_snp <- read.csv("/Users/mjf123/Documents/PA14/Breseq_output_Clones_noutf.csv",header=TRUE)
nrow(df_Clones_snp) #counts 974
#remove common mutations by position
snps_Clones_noref <- df_Clones_snp[ !(df_Clones_snp$position %in% ancestor_snps$position), ]
nrow(snps_Clones_noref) #counts 43
write.csv(snps_Clones_noref, "/Users/mjf123/Documents/PA14/Breseq_snps_Clones_noRef_byPos.csv", row.names=FALSE) #export as csv
#read in a file containing snps present in the ancestor
ancestor_snps <- read.csv("/Users/mjf123/Documents/PA14/ancestor_snps_Breseq35.csv",header=TRUE)
# Separated the populations manually
b13_snps <- read.csv("/Users/mjf123/Documents/PA14/b13_snps_noRef.csv",header = TRUE) #read in no antibiotic
nrow(b13_snps) #count 267
#Repeating removing the ancestors from the clones
df_Clones_snp <- read.csv("/Users/mjf123/Documents/PA14/Breseq_output_Clones_noutf.csv",header=TRUE)
nrow(df_Clones_snp) #counts 974
#remove common mutations by position
snps_Clones_noRef <- df_Clones_snp[ !(df_Clones_snp$position %in% ancestor_snps$position), ]
nrow(snps_Clones_noRef) #counts 43
#remove mutations common to evolved population without antibiotics by position
clones_snps_noRef_noCom <- snps_Clones_noRef[ !(snps_Clones_noRef$position %in% b13_snps$position), ]
nrow(clones_snps_noRef_noCom)#count
write.csv(clones_snps_noRef_noCom, "/Users/mjf123/Documents/PA14/clones_snps_noRef_noCom.csv", row.names = FALSE)
write.csv(clones_snps_noRef_noCom, "/Users/mjf123/Documents/PA14/Breseq_clones_snps_noRef_noCom.csv", row.names = FALSE)
update.packages()
library(tidyverse)
install.packages(installr)
install.packages("installr")
library(installr)
updateR()
install.packages(tidyverse)
install.packages("tidyverse")
install.packages("reshape2")
install.packates("rtools")
install.packages("rtools")
library(tidyverse)
file.choose()
gapminder <- read.csv("./RTutorial/gapminder.csv")
gapminder[1:3,1:2]
gapminder[seq(1,1704,length.out = 10),1:4]
View(gapminder)
gapminder[gapminder$country == "Zambia" | gapminder$country == "Zimbabwe",]
gapminder[gapminder$country %in% c("Zambia","Zimbabwe"),]
head(gapminder[gapminder$country == "Zambia" | gapminder$country == "Zimbabwe",])
gapminder[gapminder$country == "Zambia" & gapminder$lifeExp < 40,]
gapminder[gapminder$continent != "Europe",]
tmp <- gapminder
tmp$pop[1:10] <- NA
tmp[tmp$pop < 1e6,]
tmp[which(tmp$pop < 1e6),]
tmp <- gapminder
tmp[pop,[1:10]] <- NA
tmp <- gapminder
tmp[tmp$pop,[1:10]] <- NA
tmp <- gapminder
tmp[tmp$pop, [1:10]] <- NA
tmp <- gapminder
tmp[tmp$pop, 1:10] <- NA
tmp <- gapminder
tmp$pop[1:10]
# tmp[tmp$pop < 1e6,]
# tmp[which(tmp$pop < 1e6),]
tmp <- gapminder
tmp$pop[1:10] <-NA
# tmp[tmp$pop < 1e6,]
# tmp[which(tmp$pop < 1e6),]
tmp <- gapminder
tmp$pop[1:10] <-NA
tmp[, 1:10]
tmp <- gapminder
tmp$pop[1:10] <-NA
tmp[ , 1:10]
tmp <- gapminder
tmp$pop[1:10] <-NA
tmp[1:10,]
# tmp[tmp$pop < 1e6,]
# tmp[which(tmp$pop < 1e6),]
tmp <- gapminder
tmp$pop[1:10] <-NA
tmp[1:10,]
tmp[tmp$pop < 1e6,]
# tmp[which(tmp$pop < 1e6),]
tmp <- gapminder
tmp$pop[1:10] <-NA
tmp[1:10,]
test <- tmp[tmp$pop < 1e6,]
# tmp[which(tmp$pop < 1e6),]
View(test)
tmp <- gapminder
tmp$pop[1:10] <-NA
tmp[1:10,]
test <- tmp[tmp$pop < 1e6,]
tmp[which(tmp$pop < 1e6),]
tmp <- gapminder
tmp$pop[1:10] <-NA
tmp[1:10,]
test <- tmp[tmp$pop < 1e6,]
test
tmp[which(tmp$pop < 1e6),]
gapminder[gapminder$pop<1e6 & year == 2002, ]
gapminder[gapminder$pop<1e6 & gapminder$year == 2002, ]
gapminder[gapminder$pop<1e6 & gapminder$year == 2002, ]
gapminder[gapminder$lifeExp<45 & gapminder$year==2007, ]
gapminder[gapminder$pop<1e6 & gapminder$year == 2002, ]
gapminder$continent[gapminder$lifeExp<45 & gapminder$year==2007, ]
gapminder[gapminder$pop<1e6 & gapminder$year == 2002, ]
gapminder$continent[gapminder$lifeExp<45 & gapminder$year==2007]
gapminder[gapminder$pop<1e6 & gapminder$year == 2002, ]
gapminder$continent[gapminder$lifeExp<45 & gapminder$year==2007]
gapminder[gapminder$lifeExp<45 & gapminder$year==2007]
gapminder[gapminder$pop<1e6 & gapminder$year == 2002, ]
gapminder$continent[gapminder$lifeExp<45 & gapminder$year==2007]
gapminder[gapminder$lifeExp<45 & gapminder$year==2007, ]
maxLifeExp <- max(lifeExp)
maxLifeExp <- max(gapminder$lifeExp)
minPop <- min(gapminder$pop)
gapminder[gapminder$pop<1e6 & gapminder$year == 2002, ]
gapminder$continent[gapminder$lifeExp<45 & gapminder$year==2007]
gapminder[gapminder$lifeExp<45 & gapminder$year==2007, ]
gapminder$row.name[gapminder$lifeExp==maxLifeExp | gapminder$pop==minPop]
gapminder[gapminder$pop<1e6 & gapminder$year == 2002, ]
gapminder$continent[gapminder$lifeExp<45 & gapminder$year==2007]
gapminder$row.name[gapminder$lifeExp==maxLifeExp | gapminder$pop==minPop]
gapminder[gapminder$pop<1e6 & gapminder$year == 2002, ]
gapminder$continent[gapminder$lifeExp<45 & gapminder$year==2007]
gapminder$row[gapminder$lifeExp==maxLifeExp | gapminder$pop==minPop]
gapminder[gapminder$pop<1e6 & gapminder$year == 2002, ]
gapminder$continent[gapminder$lifeExp<45 & gapminder$year==2007]
gapminder$index[gapminder$lifeExp==maxLifeExp | gapminder$pop==minPop]
gapminder[gapminder$pop<1e6 & gapminder$year == 2002, ]
gapminder$continent[gapminder$lifeExp<45 & gapminder$year==2007]
gapminder[which(gapminder$lifeExp==maxLifeExp | gapminder$pop==minPop)]
gapminder[gapminder$pop<1e6 & gapminder$year == 2002, ]
gapminder$continent[gapminder$lifeExp<45 & gapminder$year==2007]
gapminder[which(gapminder$lifeExp==maxLifeExp | gapminder$pop==minPop),]
gapminder[whcih(gapminder$pop<1e6 & gapminder$year == 2002), ]
gapminder[which(gapminder$pop<1e6 & gapminder$year == 2002), ]
gapminder$continent[which(gapminder$lifeExp<45 & gapminder$year==2007)]
gapminder[which(gapminder$lifeExp==maxLifeExp | gapminder$pop==minPop),]
gapminder_extra <- gapminder
gapminder_extra$PopInMillions <- gapminder_extra$pop / 1000000
gapminder_extra$lifeExp <- round(gapminder_extra$lifeExp)
gapminder_extra
leastPop <- gapminder[order(gapminder$pop),]
head(leastPop)
sort(countries)
gapminder[order(gapminder$year, gapminder$country),]
head(gapminder[order(gapminder$year, gapminder$lifeExp),])
par(mfrow=c(2,2))
barplot(VADeaths, beside = TRUE,
col = c("lightblue", "mistyrose", "lightcyan",
"lavender", "cornsilk"), ylim = c(0, 100))
boxplot(len ~ dose, data = ToothGrowth,
boxwex = 0.25, at = 1:3 - 0.2,
subset = supp == "VC", col = "yellow",
main = "Guinea Pigs' Tooth Growth",
xlab = "Vitamin C dose mg",
ylab = "tooth length",
xlim = c(0.5, 3.5), ylim = c(0, 35), yaxs = "i")
boxplot(len ~ dose, data = ToothGrowth, add = TRUE,boxwex = 0.25, at = 1:3 + 0.2,subset = supp == "OJ", col = "orange")
legend(2, 9, c("Ascorbic acid", "Orange juice"),fill = c("yellow", "orange"))
set.seed(14)
x <- rchisq(100, df = 4)
## if you really insist on using hist() ... :
hist(x, freq = FALSE, ylim = c(0, 0.2))
curve(dchisq(x, df = 4), col = 2, lty = 2, lwd = 2, add = TRUE)
pie(c(Sky = 78, "Sunny side of pyramid" = 17, "Shady side of pyramid" = 5),
init.angle = 315, col = c("deepskyblue", "yellow", "yellow3"), border = FALSE)
hist(gapminder$lifeExp)
plot(gapminder$pop,gapminder$lifeExp)
barplot(table(gapminder$continent))
boxplot(gapminder$gdpPercap ~ gapminder$continent)
par(mar=c(0.1,0.1,0.1,0.1))
i <- 0:24
x <- floor(i /5) + 1
y <- i %%5
plot(1:10, type="n", xlim = c(1,5), ylim=c(-1,5),axes=F,xlab="",ylab="")
points(x,y,pch=i+1, cex=2)
text(x,y-0.3,i+1)
plot(gapminder$pop,gapminder$lifeExp,pch=16,
col="red",ylab="Life Expectancy",
xlab="Population",main="Life Expectancy trend with population")
boxplot(gapminder$gdpPercap ~ gapminder$continent,
col=c("red","orange","green","blue","purple"),
main="GDP per-continent",
xlab="Continent",
ylab="GDP")
pdf("myLittlePlot.pdf")
barplot(table(gapminder$continent))
dev.off()
euroData <- gapminder[gapminder$continent == "Europe" & gapminder$year == 2002,]
dim(euroData)
afrData <- gapminder[gapminder$continent == "Africa" & gapminder$year == 2002,]
dim(afrData)
plot(euroData$pop, euroData$lifeExp,col="red",
pch=16,
xlab="Population",
ylab="Life Expectancy")
points(afrData$pop, afrData$lifeExp,col="blue",pch=16)
plot(euroData$pop, euroData$lifeExp,col="red",
pch=16,
xlab="Population",
ylab="Life Expectancy")
points(afrData$pop, afrData$lifeExp,col="blue",pch=16)
nrow(afrData)
plot(euroData$pop, euroData$lifeExp,col="red",
pch=16,
xlab="Population",
ylab="Life Expectancy",
xlim=c(0,8e7),ylim=c(30,90))
points(afrData$pop, afrData$lifeExp,col="blue",pch=16)
library(RColorBrewer)
display.brewer.all(colorblindFriendly = TRUE)
boxplot(gapminder$gdpPercap ~ gapminder$continent,col=brewer.pal(5,"Set2"),
main="GDP per-continent",
xlab="Continent",
ylab="GDP")
outlier <- gapminder$country[which(gapminder$pop>3e8)]
outlier <- gapminder$country[which(gapminder$pop>3e8)]
outlier[order(outlier$pop),]
outlier <- gapminder[which(gapminder$pop>3e8)]
outlier <- gapminder[which(gapminder$pop>3e8), ]
outlier[order(outlier$pop),]
outlier <- gapminder[which(gapminder$pop>3.1
e8), ]
outlier <- gapminder[which(gapminder$pop>3.1e8), ]
outlier[order(outlier$pop),]
'%notIn%' <- Negate('%in%')
mainPlot <- gapminder[gapminder$country %notIn% c['China', 'India'], ]
'%notIn%' <- Negate('%in%')
mainPlot <- gapminder[gapminder$country %notIn% c('China', 'India'), ]
'%notIn%' <- Negate('%in%')
mainPlot <- gapminder[gapminder$country %notIn% c('China', 'India'), ]
otherPlot <- gapminder[gapminder$country %in% c('China', 'India'), ]
?abline
'%notIn%' <- Negate('%in%')
mainPlot <- gapminder[gapminder$country %notIn% c('China', 'India'), ]
otherPlot <- gapminder[gapminder$country %in% c('China', 'India'), ]
plot(mainPlot$pop, mainPlot$gdpPercap,col="red",
pch=16,
xlab="Population",
ylab="GDP per Capita",
xlim=c(0,8e7),ylim=c(30,90))
points(OtherPlot$pop, otherPlot$gdpPercap,col="blue",pch=16)
'%notIn%' <- Negate('%in%')
mainPlot <- gapminder[gapminder$country %notIn% c('China', 'India'), ]
otherPlot <- gapminder[gapminder$country %in% c('China', 'India'), ]
plot(mainPlot$pop, mainPlot$gdpPercap,col="red",
pch=16,
xlab="Population",
ylab="GDP per Capita",
xlim=c(0,8e7),ylim=c(30,90))
points(otherPlot$pop, otherPlot$gdpPercap,col="blue",pch=16)
abline(v=3.1e8, lty=2, col="blue")
'%notIn%' <- Negate('%in%')
mainPlot <- gapminder[gapminder$country %notIn% c('China', 'India'), ]
otherPlot <- gapminder[gapminder$country %in% c('China', 'India'), ]
plot(mainPlot$pop, mainPlot$gdpPercap,col="red",
pch=16,
xlab="Population",
ylab="GDP per Capita",
)
points(otherPlot$pop, otherPlot$gdpPercap,col="blue",pch=16)
abline(v=3.1e8, lty=2, col="blue")
'%notIn%' <- Negate('%in%')
mainPlot <- gapminder[gapminder$country %notIn% c('China', 'India'), ]
otherPlot <- gapminder[gapminder$country %in% c('China', 'India'), ]
plot(mainPlot$pop, mainPlot$gdpPercap,col="red",
pch=16,
xlab="Population",
ylab="GDP per Capita",
xlim=c(0,1.5e9),ylim=c(0,1e5))
points(otherPlot$pop, otherPlot$gdpPercap,col="blue",pch=16)
abline(v=3.1e8, lty=2, col="blue")
'%notIn%' <- Negate('%in%')
mainPlot <- gapminder[gapminder$country %notIn% c('China', 'India'), ]
otherPlot <- gapminder[gapminder$country %in% c('China', 'India'), ]
plot(mainPlot$pop, mainPlot$gdpPercap,col="red",
pch=16,
xlab="Population",
ylab="GDP per Capita",
xlim=c(0,1.5e9),ylim=c(0,1e5))
points(otherPlot$pop, otherPlot$gdpPercap,col="blue",pch=16)
abline(v=3.2e8, lty=2, col="blue")
'%notIn%' <- Negate('%in%')
mainPlot <- gapminder[gapminder$country %notIn% c('China', 'India'), ]
otherPlot <- gapminder[gapminder$country %in% c('China', 'India'), ]
plot(mainPlot$pop, mainPlot$gdpPercap,col="red",
pch=16,
xlab="Population",
ylab="GDP per Capita",
xlim=c(0,max(gapminder$pop)+1e5),ylim=c(0,max(gapminder$gdpPercap)+1000))
points(otherPlot$pop, otherPlot$gdpPercap,col="blue",pch=16)
abline(v=3.2e8, lty=2, col="blue")
'%notIn%' <- Negate('%in%')
mainPlot <- gapminder[gapminder$country %notIn% c('China', 'India'), ]
otherPlot <- gapminder[gapminder$country %in% c('China', 'India'), ]
plot(mainPlot$pop, mainPlot$gdpPercap,col="red",
pch=16,
xlab="Population",
ylab="GDP per Capita",
xlim=c(0,max(gapminder$pop)+1e5),ylim=c(0,max(gapminder$gdpPercap)+1000))
points(otherPlot$pop, otherPlot$gdpPercap,col="blue",pch=16)
abline(v=3.5e8, lty=2, col="blue")
subset_afr_eur <- gapminder[gapminder$continent %in% c("Europe", "Africa") & gapminder$year == 2002,]
mycol <- rep("red",nrow(subset_afr_eur))
plot(subset_afr_eur$pop, subset_afr_eur$lifeExp,
col=mycol,
pch=16)
mycol[which(subset_afr_eur$continent == "Africa")] <- "blue"
plot(subset_afr_eur$pop, subset_afr_eur$lifeExp,
col=mycol,
pch=16,
xlab="Population",
ylab="Life Expenctancy")
par(mfrow=c(1,2))
plot(euroData$pop, euroData$lifeExp,col="red",
pch=16,
xlab="Population",
ylab="Life Expectancy",
main="European Countries",
xlim=c(0,8e7),ylim=c(30,90))
plot(afrData$pop, afrData$lifeExp,col="blue",
pch=16,
xlab="Population",
ylab="Life Expectancy",
main="African Countries",
xlim=c(0,8e7),ylim=c(30,90))
boxplot(gapminder$lifeExp ~ gapminder$continent)
t.test(euroData$lifeExp,afrData$lifeExp)
plot(euroData$gdpPercap,euroData$lifeExp)
cor(euroData$gdpPercap,euroData$lifeExp)
cor(euroData$gdpPercap,euroData$lifeExp)^2
model <- lm(euroData$lifeExp~euroData$gdpPercap)
plot(euroData$gdpPercap,euroData$lifeExp)
abline(model)
model$coefficients
install.packages(deseq2)
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("DESeq2")
q()
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install()
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("tximeta")
BiocManager::install("deseq2")
2
BiocManager::install("DEseq2")
BiocManager::install("DESeq2")
BiocManager::install("tximport")
q()
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("ReportingTools")
q()
install.packages(tximportData)
BioManager::install("tximportData")
BiocManager::instal("tximportData")
BiocManager::install("tximportData")
q()
BiocManager::install.package("pcaExplorer")
BiocManager::install("pcaExplorer")
q()
BiocManager::install("BioStyle")
q()
BiocManager::install("BiocStyle")
q()
BiocManager::install("tximeta")
BiocManager::install("tximeta")
q()
Biocmanager::install("apeglm")
BiocManager::install("apeglm")
q()
install("ggplot2")
BiocManager::install("ggplot2")
BiocManager::install("igraph", "RColorBrewer", "heatmaply", "shinyHeatmaply", "shiny")
BiocManager::install("igraph")
BiocManager::install("RColorBrewer")
BiocManager::install("heatmaply")
BiocManager::install("shinyHeatmaply")
BiocManager::install("shiny")
q()
library(tidyverse)
library(here)
library(DESeq2)
library(knitr)
library(ReportingTools)
library(tximeta)
library(apeglm)
here::here()
BiocManager::install("ggplot2")
package.install("RColorBrewer")
install.packages("RColorBrewer")
install.packages("heapmaply")
install.packages("heatmaply")
install.packages("shinyHeatmaply")
install.packages("shiny")
install.packages("ggplot2")
q()
devtools::install_github("ramathv/htmlwidgets#351")
utils:::menuInstallPkgs()
devtools::install_github("ramnathv/htmlwidges#351")
devtools::install_github("ramnathv/htmlwidgets#351")
q()
devtools::install_version("htmltools", version = "0.3.6", repos = "http://cran.us.r-project.org")
devtools::install_version("htmlwidgets", version = "1.3", repos = "http://cran.us.r-project.org")
q()
install.packages("htmltools"
)
install.packages("shiny")
q()
install.packages("gridExtra")
q()
BiocManager::install("Gviz")
BiocManager::install("geneFilter")
2
BiocManager::install("genefilter")
q()
BiocManager::install("GenomicFeatures")
q()
install.packages("BiocManager")
BiocManager::install("genbankr")
BiocManager::install("seqinr")
q()
BiocManager::install("rentrez")
q()
library(dplyr)
library(tidyverse)
library(DESeq2)
library(knitr)
library(tximeta)
library(apeglm)
library(here)
library(pcaExplorer)
